@*@model IEnumerable<ToDo.Net.Models.ToDoList>*@

@using PagedList.Mvc
@*@model PagedList.IPagedList<ToDo.Net.Models.ToDoList>*@
@model  PagedList.IPagedList<ToDo.Net.Models.ToDoList>


@{
    ViewBag.Title = "Index";
}

<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css" integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/" crossorigin="anonymous">
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
<link href="~/Content/Site.css" rel="stylesheet" />

<h2>Open Task Lists</h2>

<br />

<div>
    <a href="@Url.Action("Create","ToDoLists")" class="btn btn-default btn-lg">
        <span class="far fa-plus-square" aria-hidden="true"></span>
        New task
    </a>
</div>

<br />

<input type="text" id="txtSearch" onkeyup="myFunction()" placeholder="Search Tasks ....">

<br><br>

<table id="TaskTable" class="table table-striped table">
    <thead>
       
            <tr>
                <th>Task</th>
                <th>Due Date</th>
                <th>Task Priority</th>
                <th>Completed</th>
                <th>Actions</th>
            </tr>
           
    </thead>

    <tbody>
        @foreach (var item in Model)
        {
          
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Task)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DueDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.TaskPriority)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Completed)
                    </td>
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        <td width=170px>
                            @Html.ActionLink(" ", "Edit", new { id = item.ID }, new { @class = "btn btn-primary glyphicon glyphicon-pencil", title = "Edit Task" })
                            <a onclick="Delete(@item.ID)" class="btn btn-danger" data-toggle="tooltip" title="Delete Task"><i class="glyphicon glyphicon-remove" style="color:white"></i></a>
                            @Html.ActionLink(" ", "TaskCompleted", new { id = item.ID }, new { @class = "btn btn-success glyphicon glyphicon-ok", title = "Click to complete Task" })

                        </td>
                    }
                </tr>
           
            }
        </tbody>

    <tfoot>
        <tr>
            <td colspan="13"> TOTAL TASKS : @Model.Count()</td>
        </tr>
    </tfoot>
</table>

<div class="pagination">
    @*Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount*@
    @Html.PagedListPager(Model, page => Url.Action("Index", new { page }))
</div>
@*<br />*@

<div>
    <a href="@Url.Action("Completed","ToDoLists")" class="
       btn btn-default btn-lg">
        <span class="fas fa-clipboard-check" aria-hidden="true"></span>
        View Completed Tasks
    </a>
</div>

@section Scripts {
    <script src="https://kit.fontawesome.com/de77b81930.js"></script>

    <script>
        
        $(function () {
            var successMessage = '@TempData["SuccessMessage"]'
            if (successMessage != '')
                alertify.success(successMessage)

        });

        function Delete(id) {
            alertify.confirm('Loadplanner', 'Are you sure you want to Delete this Commodity', function () {
                window.location.href = '@Url.Action("Delete","Commodities")/' + id;
            },null)
            }

    function myFunction() {
  // Declare variables 
  var input, filter, table, tr, td, i, txtValue;
  input = document.getElementById("txtSearch");
  filter = input.value.toUpperCase();
  table = document.getElementById("TaskTable");
  tr = table.getElementsByTagName("tr");

  // Loop through all table rows, and hide those who don't match the search query
  for (i = 0; i < tr.length; i++) {
    td = tr[i].getElementsByTagName("td")[0];
    if (td) {
      txtValue = td.textContent || td.innerText;
      if (txtValue.toUpperCase().indexOf(filter) > -1) {
        tr[i].style.display = "";
      } else {
        tr[i].style.display = "none";
      }
    } 
  }
}

    



    </script>

}
